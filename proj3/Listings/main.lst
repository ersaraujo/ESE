C51 COMPILER V9.60.0.0   MAIN                                                              02/17/2022 20:24:37 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG51F.H>
   2          
   3          #define TIME_LIMIT 100
   4          #define CORRECAO 0
   5          #define FREQ_TIMER 100
   6          #define FREQ_CLK 12000000
   7          
   8          #define TH0_INICIAL ((65536-(FREQ_CLK/(12*FREQ_TIMER)) + CORRECAO)>>8)
   9          #define TL0_INICIAL ((65536-(FREQ_CLK/(12*FREQ_TIMER)) + CORRECAO)&0xFF)
  10          
  11          static unsigned int timerFuncBit0 = 0;
  12          static unsigned int timerFuncBit1 = 0;
  13          
  14          sbit bit0P2 = P2 ^ 0;
  15          sbit bit1P2 = P2 ^ 1;
  16          
  17          typedef enum{
  18            INIT,
  19            CHECKBIT,
  20            COUNTER,
  21            RESET,
  22          }estados;
  23          
  24          //////////////////////////////////////////////////////////////////////////////////////
  25          void timerInit(){
  26   1        
  27   1        TR0 = 0;                                // Para o timer
  28   1        TMOD = (TMOD & 0xF0)|0x01;              //Define modo
  29   1        
  30   1        TH0 = TH0_INICIAL;                      // Define valores iniciais para os registradores TH0 e TL0
  31   1        TL0 = TL0_INICIAL;
  32   1      
  33   1        ET0 = 1;                                // Habilita interrupcao do timer 0
  34   1        TR0 = 1;                                // Ativa o timer
  35   1      }
  36          
  37          void timerInterruption (void) interrupt 1 using 2{
  38   1      
  39   1        TR0 = 0;                                // Para o timer
  40   1        
  41   1        TL0 += TL0_INICIAL;                     // Atribui valor incial para os registradores TH0 E TL0
  42   1        TH0 += TH0_INICIAL + (unsigned char) CY;
  43   1        
  44   1        TR0 = 1;                                // Ativa o timer
  45   1                                        // Verifica a flag de overflow do timer
  46   1        timerFuncBit0++;                      // Incrementa contador 1
  47   1        timerFuncBit1++;                      // Incrementa contador 2
  48   1      }
  49          
  50          //////////////////////////////////////////////////////////////////////////////////////
  51          
  52          void checkBit0(){                         // Funcao que verifica o bit0 de P2
  53   1        
  54   1        static int countTime;
C51 COMPILER V9.60.0.0   MAIN                                                              02/17/2022 20:24:37 PAGE 2   

  55   1        static estados stateFunction;
  56   1        
  57   1        switch(stateFunction){
  58   2          case CHECKBIT:                        // Estado que verifica a transi??o 0->1 do bit0
  59   2            if(bit0P2){                         // Se o bit0 de P2 for 1
  60   3              P1 = (P1 & 0xF0) | (P0 & 0x0F);   // Os 4bits menos significativos de P1 recebem os 4bits menos signifi
             -cativos de P0
  61   3              stateFunction = COUNTER;          // Passamos para o proximo estado
  62   3              countTime = 0;                    // Contador ? zerado
  63   3              timerFuncBit0 = 0;
  64   3            } 
  65   2            break;
  66   2            
  67   2          case COUNTER:                         // Estado do contador, conta 1s 
  68   2            if(timerFuncBit0 >= TIME_LIMIT){    // Verificar se o contador atingiu o limite(1s) // Zera o contador
  69   3              timerFuncBit0 = 0;                // Zera o contador da função
  70   3              P1 = P1 & 0xF0;                   // Mantem P1 com os 4bits mais significativos
  71   3              stateFunction = RESET;            // Passamos para o proximo estado
  72   3            }
  73   2            break;
  74   2            
  75   2          case RESET:                           // Estado que reseta os 4bits menos significativos de P1;
  76   2            if(!bit0P2){                        // Verifica se o bit0 == 0
  77   3              stateFunction = CHECKBIT;         // Se o bit0 de P2 == 0, passamos para o estado CHECKBIT
  78   3            }
  79   2            break;
  80   2            
  81   2          default:                              // Executada uma vez  
  82   2            if(!bit0P2){                        // Verifica se o bit0 de P2 == 0
  83   3              stateFunction = CHECKBIT;         // Caso seja, passamos para o estado CHECKBIT
  84   3            }
  85   2            break;
  86   2        }
  87   1      }
  88          //////////////////////////////////////////////////////////////////////////////////////////////////////////
             -//////////////////
  89          void checkBit1(){                         // Fun??o que verifica o bit1 de P2
  90   1        
  91   1        static int countTime;
  92   1        static estados stateFunction;
  93   1        
  94   1        switch(stateFunction){
  95   2          case CHECKBIT:                        // Estado que verifica a transi??o 0->1 do bit0
  96   2            if(bit1P2){                         // Se o bit0 de P2 for 1
  97   3              P1 = (P1 & 0x0F) | (P0 & 0xF0);   // Os 4bits mais significativos de P1 recebem os 4bits mais significa
             -tivos de P0
  98   3              stateFunction = COUNTER;          // Passamos para o proximo estado
  99   3              countTime = 0;                    // Contador ? zerado
 100   3            }
 101   2            break;
 102   2            
 103   2          case COUNTER:                         // Estado do contador, conta 1s 
 104   2            if(timerFuncBit1 >= TIME_LIMIT){    // Verificar se o contador atingiu o limite(1s) // Zera o contador
 105   3              timerFuncBit1 = 0;                // Zera o contador da funcao
 106   3              P1 = P1 & 0x0F;                   // Mantem P1 com os 4bits menos significativos
 107   3              stateFunction = RESET;            // Passamos para o proximo estado
 108   3            }
 109   2            break;
 110   2            
 111   2          case RESET:                           // Estado que reseta os 4bits menos significativos de P1;
 112   2            if(!bit1P2){                        // Verifica se o bit1 == 0
 113   3              stateFunction = CHECKBIT;         // Se o bit1 de P2 == 0, passamos para o estado CHECKBIT
C51 COMPILER V9.60.0.0   MAIN                                                              02/17/2022 20:24:37 PAGE 3   

 114   3            }
 115   2            break;
 116   2            
 117   2          default:                              // Executada uma vez  
 118   2            if(!bit1P2){                        // Verifica se o bit1 de P2 == 0
 119   3              stateFunction = CHECKBIT;         // Caso seja, passamos para o estado CHECKBIT
 120   3            }
 121   2            break;
 122   2        }
 123   1      }
 124          
 125          void main(){
 126   1        
 127   1        timerInit();        // Inicializa o timer
 128   1        EA = 1;             // Habilita o tratamento de interrupções
 129   1        while(1){
 130   2          checkBit0();
 131   2          checkBit1();
 132   2        }
 133   1      }
 134          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    225    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
